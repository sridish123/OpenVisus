name: BuildOpenVisus.CPython

on: [push]

jobs:

  # ///////////////////////////////////////////////////////////////
  Build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]
     
    steps:
    
    # ____________________________________________ CLONE OPENVISUS
    
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    - name: git clone opsray for windows
      if: matrix.os == 'windows-latest'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 4
        retry_wait_seconds: 5
        command: 'rm -Rf ExternalLibs/ospray_win && git clone https://github.com/sci-visus/ospray_win.git  ExternalLibs/ospray_win'

    
    # ____________________________________________ INSTALL CMAKE
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    # ____________________________________________ INSTALL SWIG 

    - name: Install Swig for windows
      if: matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O  && unzip swigwin-4.0.2.zip # problems with choco

    - name: Install Swig for macos
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: brew install swig
      
    # ____________________________________________ INSTALL SDK 10.9
    
    - name: Install SDK 10.9 for macos 
      if: matrix.os == 'macos-latest'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 5
        retry_wait_seconds: 5
        command: 'cd /tmp && rm -Rf MacOSX-SDKs && git clone https://github.com/phracker/MacOSX-SDKs.git'

    # ____________________________________________ INSTALL QT
    
    - name: Install Qt for windows
      if: matrix.os == 'windows-latest' 
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'
        dir: C:\
        
    - name: Install Qt for macos
      if: matrix.os == 'macos-latest' 
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        target: 'desktop'
        install-deps: 'true'  
        dir: /tmp

    - name: Install glu on ubuntu
      if: matrix.os == 'ubuntu-latest'
      shell: bash -l {0}
      run: sudo apt-get update && sudo apt-get install libglu1-mesa-dev 1>/dev/null
      
    - name: Install qemu on ubuntu
      if: matrix.os == 'ubuntu-latest'
      uses: docker/setup-qemu-action@v1


    # ____________________________________________ INSTALL CPYTHON (after QT since it seems Qt action will install python 3.9)
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'


    # ____________________________________________ COMPILE OPENVISUS
    
    - name: Compile OpenVisus on windows
      if: matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: |
           mkdir -p build 
           cd build
           cmake -G "Visual Studio 16 2019" -A "x64" -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" -DPython_EXECUTABLE=${pythonLocation}/python.exe  -DSWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe ../
           cmake --build . --target ALL_BUILD --config Release --parallel 4
           cmake --build . --target install   --config Release

    - name: Compile OpenVisus on macos
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
           mkdir -p build 
           cd build
           cmake -GXcode -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk" -DPython_EXECUTABLE=${pythonLocation}/python  ../
           cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
           cmake --build ./ --target install   --config Release 

    - name: Compile OpenVisus on ubuntu
      if: matrix.os == 'ubuntu-latest'
      shell: bash -l {0}
      run: |
           # i can use the pyqt one, but I would need to share the directory to docker, for simplicity I'm not doing it
           docker run -e PYTHON_VERSION=${{ matrix.python-version }} -e Qt5_DIR=/opt/qt512 -v ${PWD}:${PWD}  -w ${PWD} visus/portable-linux-binaries /bin/bash -c "./scripts/build_linux.sh"
           sudo chown -R root:root  build
           sudo chmod -R a+rwx      build

    # ____________________________________________ TEST
    - name: Test OpenVisus 
      shell: bash -l {0}
      run: |
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           ${pythonLocation}/python  -m OpenVisus configure  || true  # segmentation fault problem on linux
           ${pythonLocation}/python  -m OpenVisus test
           ${pythonLocation}/python  -m OpenVisus test-gui 

    # ____________________________________________ DISTRIB
    - name: Distrib OpenVisus
      shell: bash -l {0}
      run: |
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != "" ]] ; then
             echo "GIT_TAG $GIT_TAG"
             
             # install some needed packages
             ${pythonLocation}/python -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
             pushd build/Release/OpenVisus
             
             # running setup to create the wheel
             Version=${{ matrix.python-version }}
             if [[  "${{ matrix.os }}" == "windows-latest" ]] ; then PLATFORM_NAME=win_amd64            ; fi
             if [[  "${{ matrix.os }}" == "macos-latest"   ]] ; then PLATFORM_NAME=macosx_10_9_x86_64   ; fi
             if [[  "${{ matrix.os }}" == "ubuntu-latest"  ]] ; then PLATFORM_NAME=manylinux2010_x86_64 ; fi
             if [[  "${{ matrix.os }}" == "ubuntu-latest"  ]] ; then PLATFORM_NAME=manylinux2014_aarch64 ; fi
             ${pythonLocation}/python setup.py -q bdist_wheel --python-tag=cp${Version:0:1}${Version:2:1} --plat-name=${PLATFORM_NAME}
             
             # upload the weel
             ${pythonLocation}/python -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
             popd
             
             # *** distribute to Docker ***
             TAG=`${pythonLocation}/python Libs/swig/setup.py print-tag` 
             echo "Uploading ${TAG} to Docker"
             pushd Docker/mod_visus/httpd
             echo ${{ secrets.DOCKER_TOKEN }} | docker login -u=${{ secrets.DOCKER_USERNAME }} --password-stdin
             docker build --tag visus/mod_visus:$TAG  --build-arg TAG=$TAG .
             docker push visus/mod_visus:$TAG
             popd
           fi
